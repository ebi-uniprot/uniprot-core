<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.uniprot</groupId>
	<artifactId>core-parent</artifactId>
	<packaging>pom</packaging>
	<version>1.0.21.1</version>
	<name>UniProt Core Aggregator</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<surefire-version>2.22.2</surefire-version>
		<failsafe-version>2.22.2</failsafe-version>
		<mockito-version>3.0.0</mockito-version>
		<slf4j.version>1.7.28</slf4j.version>
		<logback.version>1.2.3</logback.version>
		<junit-jupiter.version>5.5.2</junit-jupiter.version>
		<hamcrest.version>1.3</hamcrest.version>
		<maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
		<jacoco-maven-plugin.version>0.8.4</jacoco-maven-plugin.version>
		<http-uniprot-private-url>https://wwwdev.ebi.ac.uk/uniprot/artifactory</http-uniprot-private-url>
		<java.version>11</java.version>
		<skipITs>false</skipITs>
		<skipUTs>false</skipUTs>
		<guava.version>30.0-jre</guava.version>

		<!-- Auto-formatting -->
		<spotless.version>1.24.1</spotless.version>

		<!-- Test coverage -->
		<jacoco.outputDir>${project.basedir}/../target</jacoco.outputDir>

		<!-- Unit test report path -->
		<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
		<jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</jacoco.reportPath>

		<!-- Integration test report path -->
		<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
		<jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</jacoco.itReportPath>
		<jacoco.version>0.8.5</jacoco.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<!-- Logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>${logback.version}</version>
			</dependency>

			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency>

			<!-- force all dependencies to log4j, including transitive ones, to use 
				this version after vulnerability found: https://access.redhat.com/security/cve/cve-2021-44228 -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>2.16.0</version>
			</dependency>

			<!-- Test -->
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito-version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>${junit-jupiter.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-all</artifactId>
				<version>${hamcrest.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>3.0.2</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<distributionManagement>
		<repository>
			<id>uniprot-artifactory-deploy-release</id>
			<name>Deploy Uniprot Maven Release</name>
			<url>${http-uniprot-private-url}/release</url>
		</repository>
		<snapshotRepository>
			<uniqueVersion>false</uniqueVersion>
			<id>uniprot-artifactory-deploy-snapshot</id>
			<name>Deploy Uniprot Maven Snapshot</name>
			<url>${http-uniprot-private-url}/snapshot</url>
		</snapshotRepository>
	</distributionManagement>
	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${surefire-version}</version>
					<configuration>
						<systemProperties>
							<property>
								<name>http.proxyHost</name>
								<value>${http.proxyHost}</value>
							</property>
							<property>
								<name>http.proxyPort</name>
								<value>${http.proxyPort}</value>
							</property>
							<property>
								<name>cv.dr.ord.location</name>
								<value>
									${project.build.directory}/../../controlled-vocabulary/src/test/resources/xdb/dr_ord
								</value>
							</property>
						</systemProperties>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${failsafe-version}</version>
					<configuration>
						<systemProperties>
							<property>
								<name>http.proxyHost</name>
								<value>${http.proxyHost}</value>
							</property>
							<property>
								<name>http.proxyPort</name>
								<value>${http.proxyPort}</value>
							</property>
						</systemProperties>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<includes>
						<include>*</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<modules>
		<module>core-common</module>
		<module>core-domain</module>
		<module>ff-parser</module>
		<module>core-parser</module>
		<module>xml-parser</module>
		<module>controlled-vocabulary</module>
		<module>json-parser</module>
		<module>tools-entry-scorer</module>
		<module>jacoco-aggregate-report</module>
		<module>core-domain-utils</module>
	</modules>

	<profiles>
		<!-- active when running on jenkins -->
		<profile>
			<id>jenkins</id>
			<activation>
				<property>
					<name>env.BUILD_NUMBER</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Exclude integration tests from unit test run -->
							<excludes>
								<skipITs>${skipUTs}</skipITs>
								<exclude>**/*IT.java</exclude>
							</excludes>
							<argLine>-Dlogback.configurationFile=${project.basedir}/../logback-test.xml
								${jacoco.agent.ut.arg}
							</argLine>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<skipITs>${skipITs}</skipITs>
							<argLine>${jacoco.agent.it.arg}</argLine>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<!-- Sets up jacaco for unit test coverage analysis (jacoco.agent.ut.arg) -->
							<execution>
								<id>prepare-ut-agent</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.reportPath}</destFile>
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
							<!-- Sets up jacaco for integration test coverage analysis (jacoco.agent.it.arg) -->
							<execution>
								<id>prepare-it-agent</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.itReportPath}</destFile>
									<propertyName>jacoco.agent.it.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>format</id>
			<build>
				<plugins>
					<!-- Auto-format code when built for consistency amongst developers' 
						contributions -->
					<plugin>
						<groupId>com.diffplug.spotless</groupId>
						<artifactId>spotless-maven-plugin</artifactId>
						<version>${spotless.version}</version>
						<configuration>
							<java>
								<googleJavaFormat>
									<version>1.7</version>
									<!-- Optional, available versions: GOOGLE, AOSP https://github.com/google/google-java-format/blob/master/core/src/main/java/com/google/googlejavaformat/java/JavaFormatterOptions.java -->
									<style>AOSP</style>
								</googleJavaFormat>
								<removeUnusedImports />
								<importOrder>
									<order>java,javax,org,com</order>
								</importOrder>
							</java>
							<formats>
								<format>
									<includes>
										<include>pom.xml</include>
										<include>src/main/**/*.xml</include>
										<include>src/main/**/*.xsd</include>
									</includes>
									<eclipseWtp>
										<type>XML</type>
									</eclipseWtp>
								</format>
							</formats>
						</configuration>
						<executions>
							<execution>
								<!-- Reformats as soon as possible -->
								<id>spotless-apply</id>
								<phase>compile</phase>
								<goals>
									<goal>apply</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>no-spotless</id>
			<build>
				<plugins>
					<plugin>
						<groupId>com.diffplug.spotless</groupId>
						<artifactId>spotless-maven-plugin</artifactId>
						<version>${spotless.version}</version>
						<executions>
							<execution>
								<id>spotless-apply</id>
								<phase>none</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
