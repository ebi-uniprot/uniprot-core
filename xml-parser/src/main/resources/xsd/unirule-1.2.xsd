<?xml version="1.0" encoding="UTF-8"?>
<!-- ***************************************************************************** 
	UniRule.xsd Version: $Revision$ Date: $Date$ Copyright (c) 2012 UniProt Consortium 
	All rights reserved. ******************************************************************************* -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns="http://uniprot.org/unirule-1.2"
	xmlns:uniprot="http://uniprot.org/uniprot"
	targetNamespace="http://uniprot.org/unirule-1.2"
	elementFormDefault="qualified">

	<!-- Where possible types are those defined in the uniprot.xsd -->
	<xs:import namespace="http://uniprot.org/uniprot"
		schemaLocation="uniprot.xsd" />

	<xs:complexType name="uniRulesType">
		<xs:annotation>
			<xs:documentation>Describes a collection of UniRule rules.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="unirule" type="uniRuleType"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<!-- Root element definition begins -->
	<xs:element name="unirules" type="uniRulesType" />
	<!-- Root element definition ends -->

	<!-- Start of the Main Type -->
	<xs:complexType name="mainType">
		<xs:annotation>
			<xs:documentation>Main types are discreet units of conditions,
				annotations and rule exceptions.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="conditionSets">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="conditionSet" type="conditionSetType"
							maxOccurs="unbounded" />
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="annotations" type="annotationsType"
				minOccurs="0" />
			<xs:element name="ruleExceptions"
				type="ruleExceptionsType" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of the Main Type -->

	<!-- Start of the Case Type -->
	<xs:complexType name="caseType">
		<xs:annotation>
			<xs:documentation>Cases represent minirules similar to the ones
				defined in the mainType. They are used to generate more specific
				annotations on a subset of entries touched by the main rule. On top
				of it they can be exempted from overall rule statistics when the
				"overallStatsExempted" flag is set.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="mainType">
				<xs:attribute name="overallStatsExempted"
					type="xs:boolean" use="optional" default="false" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- End of the Case Type -->

	<xs:complexType name="conditionSetType">
		<xs:sequence>
			<xs:element name="condition" type="conditionType"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="annotationsType">
		<xs:sequence>
			<xs:element name="annotation" type="annotationType"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>


	<!-- Start of the UniRule Type Definition -->
	<xs:complexType name="uniRuleType">
		<xs:annotation>
			<xs:documentation>A rule definition.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="information" type="informationType" />
			<xs:element name="main" type="mainType" />
			<xs:element name="cases" type="casesType" minOccurs="0" />
			<xs:element name="samFeatureSet" type="samFeatureSetType"
				minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="positionalFeatureSet"
				type="positionalFeatureSetType" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="status" type="ruleStatusType"
			use="required" />
		<xs:attribute name="id" type="xs:string" use="required" />
		<xs:attribute name="creator" type="xs:string"
			use="optional" />
		<xs:attribute name="created" type="xs:date"
			use="optional" />
		<xs:attribute name="modifiedBy" type="xs:string"
			use="optional" />
		<xs:attribute name="modified" type="xs:date"
			use="optional" />
	</xs:complexType>
	<!-- End of the UniRule Type Definition -->

	<!-- Start of case statement type -->
	<xs:complexType name="casesType">
		<xs:annotation>
			<xs:documentation>Cases are discreet units of conditions and
				annotations that are a
				specialization of the containing rule. They are only applied against accessions
				that meet the criteria
				of the containing rule.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="case" type="caseType"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of case statement elements -->


	<!-- Start of Information type -->
	<xs:complexType name="informationType">
		<xs:annotation>
			<xs:documentation>Holds information about the rule.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="version" type="xs:string" />
			<xs:element name="comment" type="xs:string" minOccurs="0" />
			<xs:element name="oldRuleNum" type="xs:string"
				minOccurs="0" />
			<xs:element name="uniprotId" type="multiValueType"
				minOccurs="0" />
			<xs:element name="dataClass" type="xs:string"
				minOccurs="0" />
			<xs:element name="name" type="multiValueType"
				minOccurs="0" />
			<xs:element name="fusion" type="fusionType" minOccurs="0" />
			<xs:element name="related" type="multiValueType"
				minOccurs="0" />
			<xs:element name="template" type="multiValueType"
				minOccurs="0" />
			<xs:element name="duplicate" type="multiValueType"
				minOccurs="0" />
			<xs:element name="plasmid" type="multiValueType"
				minOccurs="0" />
			<xs:element name="internal" type="xs:string" minOccurs="0" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Information Type -->


	<!-- Start of Multivalue Type -->
	<xs:complexType name="multiValueType">
		<xs:annotation>
			<xs:documentation>Holds a reference to a multi value component.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="value" type="xs:string" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Multivalue Type -->


	<!-- Start of Fusion Type -->
	<xs:complexType name="fusionType">
		<xs:annotation>
			<xs:documentation>FusionType definition.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Nter" type="xs:string" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="Cter" type="xs:string" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Fusion Type -->


	<!-- Start of Condition Type -->
	<xs:complexType name="conditionType">
		<xs:annotation>
			<xs:documentation>Condition value.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="value" type="conditionValue"
				minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="range" type="rangeType" minOccurs="0" />
			<xs:element name="tag" type="ftagConditionValue"
				minOccurs="0" />
		</xs:sequence>
		<xs:attribute name="type" type="xs:string" use="required" />
		<xs:attribute name="negative" type="xs:boolean"
			use="optional" default="false" />
	</xs:complexType>

	<!--Value held within a condition. If the value is part of a controlled 
		vocabulary, the cvID attribute will be populated with the value's CV identifier -->
	<xs:complexType name="conditionValue">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="cvId" type="xs:string"
					use="optional" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>

	<!-- Used to hold an FTAG condition with an optional pattern, i.e., FT:Tag=[AVI] -->
	<xs:complexType name="ftagConditionValue">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="pattern" type="xs:string"
					use="optional" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- End of ConditionSet elements -->


	<!-- Start of Annotation elements -->
	<xs:complexType name="annotationType">
		<xs:annotation>
			<xs:documentation>Annotation definition.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element name="comment" type="uniprot:commentType" />
			<xs:element name="keyword" type="uniprot:keywordType" />
			<xs:element name="gene" type="uniprot:geneType" />
			<xs:element name="protein" type="proteinType" />
			<xs:element name="dbReference"
				type="uniprot:dbReferenceType" />
		</xs:choice>
	</xs:complexType>
	<!--End of Annotation elements -->

	<!-- Protein names definition begins -->
	<xs:complexType name="proteinType">
		<xs:annotation>
			<xs:documentation>Describes the names for the protein and parts
				thereof.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="proteinNameGroup" />
			<xs:element name="domain" minOccurs="0"
				maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Describes names of "domains".</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref="proteinNameGroup" />
				</xs:complexType>
			</xs:element>
			<xs:element name="component" minOccurs="0"
				maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Describes names of processed products.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:group ref="proteinNameGroup" />
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:group name="proteinNameGroup">
		<xs:sequence>
			<xs:element name="recommendedName" minOccurs="0">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="fullName"
							type="uniprot:evidencedStringType" minOccurs="0" />
						<xs:element name="shortName"
							type="uniprot:evidencedStringType" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="ecNumber"
							type="uniprot:evidencedStringType" minOccurs="0"
							maxOccurs="unbounded" />
					</xs:sequence>
					<!-- xs:attribute name="ref" type="xs:string" use="optional"/ -->
				</xs:complexType>
			</xs:element>
			<xs:element name="alternativeName" minOccurs="0"
				maxOccurs="unbounded">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="fullName"
							type="uniprot:evidencedStringType" minOccurs="0" />
						<xs:element name="shortName"
							type="uniprot:evidencedStringType" minOccurs="0"
							maxOccurs="unbounded" />
						<xs:element name="ecNumber"
							type="uniprot:evidencedStringType" minOccurs="0"
							maxOccurs="unbounded" />
					</xs:sequence>
					<!-- xs:attribute name="ref" type="xs:string" use="optional"/ -->
				</xs:complexType>
			</xs:element>
			<xs:element name="allergenName"
				type="uniprot:evidencedStringType" minOccurs="0" />
			<xs:element name="biotechName"
				type="uniprot:evidencedStringType" minOccurs="0" />
			<xs:element name="cdAntigenName"
				type="uniprot:evidencedStringType" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="innName"
				type="uniprot:evidencedStringType" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="flag" minOccurs="0">
				<xs:complexType>
					<xs:sequence>
						<xs:element name="value" type="xs:string" minOccurs="0"
							maxOccurs="unbounded" />
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:group>
	<!-- Protein names definition ends -->

	<!-- Start of Rule Exception elements -->
	<xs:complexType name="ruleExceptionsType">
		<xs:annotation>
			<xs:documentation>The rule can contain a list of exceptions</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="ruleException" type="ruleExceptionType"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>


	<!-- Start of Rule Exception Type -->
	<xs:complexType name="ruleExceptionType">
		<xs:annotation>
			<xs:documentation>Definition of an individual exception instance.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="note" type="xs:string" minOccurs="0" />
			<xs:element name="category" type="xs:string" />
			<xs:choice>
				<xs:element name="annotation" type="annotationType" />
				<xs:element name="positionalFeature"
					type="positionalFeatureType" />
			</xs:choice>
			<xs:element name="accession" type="xs:string"
				minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Rule Exception elements -->


	<!-- status definition -->
	<xs:simpleType name="ruleStatusType">
		<xs:annotation>
			<xs:documentation>The rule can have one of several states that will
				determine how it is processed.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="APPLY" />
			<xs:enumeration value="DISUSED" />
			<xs:enumeration value="TEST" />
		</xs:restriction>
	</xs:simpleType>


	<!-- Start of Sam Feature Set Type -->
	<xs:complexType name="samFeatureSetType">
		<xs:annotation>
			<xs:documentation>There can be multiple SamFeature Sets per rule, but
				only one Sam Feature per Feature
				Set.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="conditionSet" type="conditionSetType"
				minOccurs="0" />
			<xs:element name="annotations" type="annotationsType"
				minOccurs="0" />
			<xs:element name="samTrigger" type="samTriggerType" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Sam Feature Set Type -->


	<!-- Start of Sam Feature Type -->
	<xs:complexType name="samTriggerType">
		<xs:annotation>
			<!-- todo replace the term SAM with a more conducive term -->
			<xs:documentation>Sam Features capture annotation based on the
				following Sequence Analysis Methods
				- occurrences of SignalP; Transmembrane and Coiled Coil. If the
				selected SAM is detected in a
				candidate protein (and within the hit count range) then the candidate protein
				is
				tested against a discrete rule. The condition type below holds the SAM
				method to test, the
				annotation type below holds a reference to the discrete rule to apply.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice>
				<xs:element name="transmembrane"
					type="samTransmembraneConditionType" minOccurs="0" />
				<xs:element name="signal" type="samSignalConditionType"
					minOccurs="0" />
				<xs:element name="coiledCoil"
					type="samCoiledCoilConditionType" minOccurs="0" />
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- End of Sam Feature Type -->


	<!-- Start of Sam Transmembrane Condition Type -->
	<xs:complexType name="samTransmembraneConditionType">
		<xs:annotation>
			<xs:documentation>Specifies the type of annotation required for a sam
				feature, as well as the hit count
				range expected to be found.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="expectedHits" type="rangeType" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Sam Transmembrane Condition Type -->


	<!-- Start of SamSignal Condition Type -->
	<xs:complexType name="samSignalConditionType">
		<xs:annotation>
			<xs:documentation>Specifies the type of annotation required for a sam
				feature, as well as the hit count
				range expected to be found.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="expectedHits" type="rangeType" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Sam Signal Condition Type -->


	<!-- Start of Sam Coiled Coil Condition Type -->
	<xs:complexType name="samCoiledCoilConditionType">
		<xs:annotation>
			<xs:documentation>Specifies the type of annotation required for a sam
				feature, as well as the hit count
				range expected to be found.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="expectedHits" type="rangeType" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Sam Feature Coiled Coil Condition Type -->


	<!-- Start of PositionalFeaturesSet -->
	<xs:complexType name="positionalFeatureSetType">
		<xs:annotation>
			<xs:documentation>A container for both standard condition and
				annotations, as well as
				positional features. There is a dependency between ConditionSet and
				annotations - either both should exist or neither.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="conditionSet" type="conditionSetType"
				minOccurs="0" />
			<xs:element name="annotations" type="annotationsType"
				minOccurs="0" />
			<xs:element name="positionalFeature"
				type="positionalFeatureType" maxOccurs="unbounded" />
			<xs:element name="ruleExceptions"
				type="ruleExceptionsType" minOccurs="0" />
		</xs:sequence>
		<xs:attribute name="template" type="xs:string" />
		<xs:attribute name="alignmentSignature" type="xs:string" />
		<xs:attribute name="tag" type="xs:string" />
	</xs:complexType>
	<!-- End of PositionalFeaturesSet -->


	<!-- Start of Positional Feature Type -->
	<xs:complexType name="positionalFeatureType">
		<xs:annotation>
			<xs:documentation>Positional Features specify annotation based on the
				annotation already applied to an example
				accession (template). There is a one to one mapping between the 'condition'
				which specifies the section
				of signature from the template sequence to use as a comparator, and
				the annotation to be applied.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="positionalCondition"
				type="positionalConditionType" />
			<xs:element name="positionalAnnotation"
				type="positionalAnnotationType" />
		</xs:sequence>
		<xs:attribute name="inGroup" type="xs:boolean" />
	</xs:complexType>
	<!-- End of positional feature type -->


	<!-- Start of Positional Condition Type -->
	<xs:complexType name="positionalConditionType">
		<xs:annotation>
			<xs:documentation>Describes which part of the signature from the
				template will be used as a comparator with
				the target accession</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="position" type="rangeType" />
			<xs:element name="pattern" type="xs:string" minOccurs="0"
				maxOccurs="1" />
		</xs:sequence>
	</xs:complexType>
	<!-- End of Positional Condition Type -->


	<!-- Start of Positional Annotation Type -->
	<xs:complexType name="positionalAnnotationType">
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="type" type="xs:string" />
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<!-- End of Positional Annotation Type -->


	<!-- Start of RangeType -->
	<xs:complexType name="rangeType">
		<xs:annotation>
			<xs:documentation>Generic type for data with a start and end range</xs:documentation>
		</xs:annotation>
		<xs:attribute name="start" type="xs:string" />
		<xs:attribute name="end" type="xs:string" />
	</xs:complexType>
	<!--End of RangeType -->
</xs:schema>